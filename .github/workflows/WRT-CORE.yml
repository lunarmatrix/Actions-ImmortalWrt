#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_TARGET:
        required: true
        type: string
      WRT_SUBTARGET:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_ARCH:
        required: false
        type: string
      WRT_WIFI:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_SUBTARGET: ${{inputs.WRT_SUBTARGET}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_ARCH: ${{inputs.WRT_ARCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{ inputs.WRT_TARGET }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          testing: false
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          WRT_DATE=$(TZ=UTC-8 date +"%Y%m%d")
          WRT_VER=$(echo $WRT_REPO | cut -d '/' -f1)-$WRT_BRANCH
          if [ "${{ env.WRT_TARGET }}" = "mediatek" ]; then
            WRT_PKG="${GITHUB_WORKSPACE}/Config/pkgs-${{ env.WRT_TARGET }}.txt"
          else
            WRT_PKG="${GITHUB_WORKSPACE}/Config/pkgs.txt"
          fi
          if [ "${{ env.WRT_SUBTARGET }}" != "generic" ]; then
            if [ "${{ env.WRT_TARGET }}" = "qualcommax" ] && [ "${{ inputs.WRT_WIFI }}" = "false" ]; then
              WRT_CONFIG="${GITHUB_WORKSPACE}/Config/${{ env.WRT_TARGET }}-${{ env.WRT_SUBTARGET }}-no-wifi.txt"
              TAG_NAME="${{ env.WRT_TARGET }}-${{ env.WRT_SUBTARGET }}-$(echo $WRT_REPO | cut -d '/' -f1)-NOWIFI-$WRT_DATE"
            else
              WRT_CONFIG="${GITHUB_WORKSPACE}/Config/${{ env.WRT_TARGET }}-${{ env.WRT_SUBTARGET }}.txt"
              TAG_NAME="${{ env.WRT_TARGET }}-${{ env.WRT_SUBTARGET }}-$(echo $WRT_REPO | cut -d '/' -f1)-$WRT_DATE"
            fi
          else
            WRT_CONFIG="${GITHUB_WORKSPACE}/Config/${{ env.WRT_TARGET }}.txt"
            TAG_NAME="${{ env.WRT_TARGET }}-$(echo $WRT_REPO | cut -d '/' -f1)-$WRT_DATE"
          fi
          WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $WRT_CONFIG)
          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV
          echo "WRT_PKG=$WRT_PKG" >> $GITHUB_ENV
          echo "WRT_CONFIG=$WRT_CONFIG" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH https://github.com/$WRT_REPO.git ./wrt
          cd ./wrt
          echo "WRT_HASH=$(git show -s --date=short --format="%H")" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="%an")
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          COMMIT_DATE=$(TZ=UTC-8 git show -s --date=short --format="%ci")
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          COMMIT_MESSAGE=$(git show -s --date=short --format="%s")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          env
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{env.WRT_TARGET}}-${{env.WRT_VER}}-${{env.WRT_HASH}}
          restore-keys: ${{env.WRT_TARGET}}-${{env.WRT_VER}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "$WRT_TARGET-$WRT_VER" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a
        
      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          cat $WRT_CONFIG $WRT_PKG $GITHUB_WORKSPACE/Config/plugins.txt >> .config

          [[ $WRT_ARCH != "unknown" && -n $WRT_ARCH ]] && $GITHUB_WORKSPACE/Scripts/Preset.sh $WRT_ARCH

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc)

          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/config-"$DEVICE_SUBTARGET"-"$WRT_VER".txt

          if [[ $WRT_TEST != 'true' ]]; then
            KERNEL_VERSION=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
            for TYPE in $WRT_TYPE ; do
              for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
                EXT=$(basename $FILE | cut -d '.' -f 2-)
                NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
                NEW_FILE="$(echo $WRT_REPO | cut -d '/' -f1)"-"$NAME"-"$WRT_DATE"."$EXT"
                if [[ "$NEW_FILE" == *"kernel"* || "$NEW_FILE" == *"initramfs"* || "$NEW_FILE" == *"stock"* ]]; then
                  echo "Deleting $NEW_FILE as it contains 'kernel', 'initramfs', or 'stock'"
                  rm -f $FILE
                  continue
                fi
                mv -f $FILE ./upload/$NEW_FILE
              done
            done
          fi

          echo "KERNEL_VERSION=${KERNEL_VERSION:-none}" >> $GITHUB_ENV

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.TAG_NAME}}
          files: ./wrt/upload/*.*
          body: |
            **This is OpenWrt Firmware for ${{ env.TAG_NAME }}**
            ### 📒 固件信息
            - 🌐 后台地址: ${{ env.WRT_IP }}
            - 🔒 默认密码: 无
            - 📶 WIFI 名称: ${{ env.WRT_SSID }}
            - 🔑 WIFI 密码: ${{ env.WRT_WORD }}

            ### 📦 固件版本
            - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - 📂 固件源码: https://github.com/${{ env.WRT_REPO }}
            - 🌿 源码分支: ${{ env.WRT_BRANCH }}
            - 🚀 内核版本: ${{ env.KERNEL_VERSION }}
            
            ### 📅 更新日志
            - 固件编译前最后一次 ➦ [主源码](https://github.com/${{ env.WRT_REPO }}) 更新记录
            - ✍️ 作者: ${{ env.COMMIT_AUTHOR }}
            - 🕒 时间: ${{ env.COMMIT_DATE }}
            - 📝 内容: ${{ env.COMMIT_MESSAGE }}
            - 🔗 哈希: ${{ env.WRT_HASH }}
